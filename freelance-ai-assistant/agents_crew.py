"""
Backend CrewAI - Syst√®me Multi-Agent pour Freelances
"""

import os
import sys
from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool, ScrapeWebsiteTool
from typing import Dict, Any

# Fix pour l'encodage UTF-8 sur Windows
if sys.platform == 'win32':
    import locale
    if sys.stdout.encoding != 'utf-8':
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')

class FreelanceCrew:
    """Orchestrateur du syst√®me multi-agent pour l'accompagnement des freelances"""

    def __init__(self):
        """Initialisation des outils et configuration"""
        # R√©cup√©ration des cl√©s API depuis le fichier .env
        from dotenv import load_dotenv
        load_dotenv()

        # Configuration des cl√©s API
        os.environ['OPENAI_API_KEY'] = "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"
        os.environ['SERPER_API_KEY'] = "bc1bd438793d6bb90a2fe3cfdb273f5740116b12"

        # Initialisation des outils
        try:
            self.search_tool = SerperDevTool()
            self.scrape_tool = ScrapeWebsiteTool()
            self.tools = [self.search_tool, self.scrape_tool]
        except Exception as e:
            print(f"Erreur lors de l'initialisation des outils: {e}")
            self.tools = []

    def create_agents(self) -> Dict[str, Agent]:
        """Cr√©ation des trois agents IA sp√©cialis√©s"""

        agents = {}

        # üéØ Agent 1: Positionnement & Offre
        agents['positioning'] = Agent(
            role="Expert en Positionnement et Marketing Freelance",
            goal="Aider le freelance √† clarifier sa cible, son offre et √† se diff√©rencier dans un march√© concurrentiel",
            backstory="""Vous √™tes un expert en strat√©gie de positionnement avec 15 ans d'exp√©rience
            dans l'accompagnement de freelances. Vous excellez dans l'identification de niches rentables,
            la cr√©ation de propositions de valeur uniques et l'optimisation de la visibilit√© professionnelle.
            Votre approche est pragmatique et orient√©e r√©sultats.""",
            verbose=True,
            allow_delegation=False,
            tools=self.tools
        )

        # üíº Agent 2: Statut, Fiscalit√© & Tr√©sorerie
        agents['finance'] = Agent(
            role="Expert en Fiscalit√© et Gestion Financi√®re pour Freelances",
            goal="Aider le freelance √† choisir le bon statut, anticiper les charges et simuler les revenus pour s√©curiser son activit√©",
            backstory="""Vous √™tes un conseiller expert en droit social et fiscalit√© des ind√©pendants.
            Avec une expertise pointue des diff√©rents statuts juridiques fran√ßais (micro-entreprise, SASU, EURL),
            vous aidez les freelances √† optimiser leur situation fiscale et √† s√©curiser leur tr√©sorerie.
            Vous √™tes pr√©cis, p√©dagogue et toujours √† jour des derni√®res r√©glementations.""",
            verbose=True,
            allow_delegation=False,
            tools=self.tools
        )

        # üì¢ Agent 3: Visibilit√© & Prospection
        agents['marketing'] = Agent(
            role="Expert en Marketing Digital et Prospection B2B",
            goal="Accompagner le freelance dans l'acquisition de visibilit√© et la recherche de clients",
            backstory="""Vous √™tes un sp√©cialiste du marketing digital et de la prospection commerciale
            avec une expertise sp√©cifique pour les freelances. Vous ma√Ætrisez LinkedIn, l'email marketing,
            et les strat√©gies de contenu. Votre approche est syst√©matique et orient√©e conversion,
            avec un focus sur l'acquisition de clients qualifi√©s.""",
            verbose=True,
            allow_delegation=False,
            tools=self.tools
        )

        return agents

    def create_positioning_tasks(self, agents: Dict[str, Agent], profile: Dict[str, Any]) -> list:
        """Cr√©ation des 7 t√¢ches pour l'agent Positionnement"""

        tasks = []

        # T√¢che 1: Identifier la niche
        tasks.append(Task(
            description=f"""Analyser le profil suivant et identifier la niche la plus pertinente:
            - Nom: {profile.get('nom', 'Freelance')}
            - Objectif: {profile.get('objectif', 'Lancer mon activit√©')}
            - Comp√©tences: {profile.get('competences', [])}
            - Exp√©rience: {profile.get('experience', '')}
            - Secteur: {profile.get('secteur', '')}

            Adapter les recommandations selon l'objectif principal du freelance.
            Identifier une niche sp√©cifique en croisant les comp√©tences avec les tendances du march√© actuel.
            Fournir une analyse de la demande et du potentiel de cette niche.""",
            expected_output="Niche identifi√©e avec justification bas√©e sur les tendances march√© et analyse de la demande",
            agent=agents['positioning']
        ))

        # T√¢che 2: D√©finir le persona client
        tasks.append(Task(
            description=f"""D√©finir pr√©cis√©ment le client id√©al (persona) pour ce freelance.
            Inclure: profil d√©mographique, besoins principaux, pain points, budget type,
            crit√®res de d√©cision, canaux de communication pr√©f√©r√©s.""",
            expected_output="Persona client d√©taill√© avec caract√©ristiques compl√®tes",
            agent=agents['positioning']
        ))

        # T√¢che 3: Cr√©er le pitch
        tasks.append(Task(
            description=f"""Cr√©er 3 versions d'un pitch percutant:
            1. Version courte (1 ligne - elevator pitch)
            2. Version moyenne (3-4 lignes - pr√©sentation LinkedIn)
            3. Version longue (1 paragraphe - pr√©sentation d√©taill√©e)

            Le pitch doit √™tre orient√© b√©n√©fices clients et diff√©renciant.""",
            expected_output="3 versions de pitch adapt√©es √† diff√©rents contextes",
            agent=agents['positioning']
        ))

        # T√¢che 4: Bio LinkedIn optimis√©e
        tasks.append(Task(
            description=f"""R√©diger une bio LinkedIn optimis√©e pour {profile.get('nom', 'le freelance')}.
            La bio doit:
            - Accrocher d√®s la premi√®re ligne
            - Mettre en avant la proposition de valeur unique
            - Inclure des mots-cl√©s pertinents pour le SEO LinkedIn
            - Avoir un CTA clair
            - Faire maximum 2000 caract√®res""",
            expected_output="Bio LinkedIn compl√®te et optimis√©e SEO",
            agent=agents['positioning']
        ))

        # T√¢che 5: Description des services
        tasks.append(Task(
            description="""Transformer l'offre technique en une description de services orient√©e b√©n√©fices clients.
            Pour chaque service:
            - Nom accrocheur
            - B√©n√©fices concrets pour le client
            - R√©sultats attendus
            - Diff√©renciateurs""",
            expected_output="Description de 3-5 services principaux orient√©s b√©n√©fices",
            agent=agents['positioning']
        ))

        # T√¢che 6: Benchmark concurrentiel
        tasks.append(Task(
            description="""R√©aliser une analyse rapide de 3 concurrents principaux.
            Pour chaque concurrent identifier:
            - Positionnement
            - Points forts
            - Points faibles
            - Opportunit√©s de diff√©renciation""",
            expected_output="Tableau comparatif avec opportunit√©s de diff√©renciation",
            agent=agents['positioning']
        ))

        # T√¢che 7: Simplifier l'offre
        tasks.append(Task(
            description="""Simplifier et am√©liorer l'offre globale:
            - Reformuler en langage orient√© r√©sultats (pas de jargon technique)
            - Structurer en 3 packages/formules clairs
            - D√©finir les garanties/engagements
            - Proposer une offre d'appel""",
            expected_output="Offre structur√©e en 3 formules avec pricing indicatif",
            agent=agents['positioning']
        ))

        return tasks

    def create_finance_tasks(self, agents: Dict[str, Agent], profile: Dict[str, Any]) -> list:
        """Cr√©ation des 7 t√¢ches pour l'agent Fiscalit√©"""

        tasks = []

        # T√¢che 1: Questions orientation statut
        tasks.append(Task(
            description=f"""Pour le profil {profile.get('nom', 'Freelance')} avec:
            - Objectif principal: {profile.get('objectif', 'Lancer mon activit√©')}
            - Revenu cible: {profile.get('revenu_cible', 4000)}‚Ç¨/mois
            D√©terminer les questions cl√©s √† poser pour orienter le choix du statut juridique optimal.
            Adapter les conseils selon l'objectif (d√©marrage, croissance, sp√©cialisation).""",
            expected_output="Liste de 5-7 questions essentielles pour le choix du statut",
            agent=agents['finance']
        ))

        # T√¢che 2: Comparatif des statuts
        tasks.append(Task(
            description=f"""Comparer les statuts juridiques adapt√©s (micro-entreprise, SASU, EURL, portage salarial)
            pour un revenu cible de {profile.get('revenu_cible', 4000)}‚Ç¨/mois.
            Inclure avantages, inconv√©nients, plafonds, r√©gime fiscal et social.""",
            expected_output="Tableau comparatif d√©taill√© des statuts avec recommandation",
            agent=agents['finance']
        ))

        # T√¢che 3: Simulation revenus nets
        tasks.append(Task(
            description=f"""Simuler les revenus nets, cotisations et imp√¥ts pour un CA mensuel de
            {profile.get('revenu_cible', 4000) * 1.3}‚Ç¨ selon 3 sc√©narios:
            1. Micro-entreprise
            2. SASU avec dividendes
            3. EURL √† l'IS""",
            expected_output="Simulations chiffr√©es avec revenus nets apr√®s charges et imp√¥ts",
            agent=agents['finance']
        ))

        # T√¢che 4: Tableau de tr√©sorerie
        tasks.append(Task(
            description="""G√©n√©rer un tableau de tr√©sorerie pr√©visionnel sur 6 mois incluant:
            - Entr√©es (CA pr√©visionnel avec progression)
            - Sorties (charges fixes, variables, cotisations, imp√¥ts)
            - Solde de tr√©sorerie
            - Besoins en fonds de roulement""",
            expected_output="Tableau de tr√©sorerie mois par mois sur 6 mois",
            agent=agents['finance']
        ))

        # T√¢che 5: Planning d√©marches
        tasks.append(Task(
            description="""Cr√©er un planning d√©taill√© des d√©marches administratives pour cr√©er son activit√©:
            - √âtapes dans l'ordre chronologique
            - Documents n√©cessaires
            - D√©lais moyens
            - Co√ªts associ√©s
            - Organismes √† contacter""",
            expected_output="Checklist chronologique des d√©marches avec d√©tails pratiques",
            agent=agents['finance']
        ))

        # T√¢che 6: Rappels fiscaux
        tasks.append(Task(
            description="""√âtablir un calendrier des obligations fiscales et sociales sur 12 mois:
            - Dates de d√©claration et paiement
            - Cotisations sociales
            - TVA si applicable
            - Imp√¥ts
            - CFE
            Avec syst√®me d'alertes recommand√©""",
            expected_output="Calendrier annuel avec dates cl√©s et montants estim√©s",
            agent=agents['finance']
        ))

        # T√¢che 7: Conseils et erreurs
        tasks.append(Task(
            description="""Identifier:
            1. Les 5 principales aides disponibles pour les freelances d√©butants
            2. Les 7 erreurs fiscales/administratives les plus courantes √† √©viter
            3. Les 3 optimisations fiscales l√©gales recommand√©es""",
            expected_output="Guide pratique des aides, erreurs √† √©viter et optimisations",
            agent=agents['finance']
        ))

        return tasks

    def create_marketing_tasks(self, agents: Dict[str, Agent], profile: Dict[str, Any]) -> list:
        """Cr√©ation des 7 t√¢ches pour l'agent Marketing"""

        tasks = []

        # T√¢che 1: Identifier les canaux
        tasks.append(Task(
            description=f"""Pour un freelance {profile.get('secteur', 'tech')} avec l'objectif "{profile.get('objectif', 'Lancer mon activit√©')}",
            identifier les 5 canaux de visibilit√© les plus pertinents (LinkedIn, Twitter, blog, newsletter, etc.)
            avec justification et priorit√© adapt√©es √† cet objectif sp√©cifique.""",
            expected_output="Liste prioris√©e des canaux avec strat√©gie pour chacun",
            agent=agents['marketing']
        ))

        # T√¢che 2: Plan de contenu
        tasks.append(Task(
            description="""Cr√©er un plan de contenu structur√© sur 4 semaines incluant:
            - Th√©matiques par semaine
            - Types de contenu (article, vid√©o, infographie, etc.)
            - Fr√©quence de publication
            - Objectifs par contenu (notori√©t√©, engagement, conversion)""",
            expected_output="Calendrier √©ditorial d√©taill√© sur 4 semaines",
            agent=agents['marketing']
        ))

        # T√¢che 3: Posts LinkedIn
        tasks.append(Task(
            description="""R√©diger 5 posts LinkedIn pr√™ts √† publier:
            1. Post de pr√©sentation/positionnement
            2. Post √©ducatif (partage d'expertise)
            3. Post storytelling (retour d'exp√©rience)
            4. Post engagement (question √† la communaut√©)
            5. Post case study/r√©sultats client

            Inclure √©mojis, hashtags et CTA adapt√©s.""",
            expected_output="5 posts LinkedIn complets avec formatting et hashtags",
            agent=agents['marketing']
        ))

        # T√¢che 4: Templates prospection
        tasks.append(Task(
            description="""Cr√©er 3 templates d'emails de prospection personnalisables:
            1. Cold email premi√®re approche
            2. Email de relance
            3. Email de nurturing (partage de valeur)

            Plus 2 templates de messages LinkedIn (connexion et message).""",
            expected_output="5 templates de messages pr√™ts √† personnaliser",
            agent=agents['marketing']
        ))

        # T√¢che 5: Syst√®me de suivi
        tasks.append(Task(
            description="""Organiser un syst√®me de suivi des prospects simple:
            - Cat√©gorisation des leads (chaud/ti√®de/froid)
            - Pipeline de conversion en 5 √©tapes
            - Indicateurs de suivi (taux d'ouverture, r√©ponse, conversion)
            - Outils recommand√©s (CRM simple, spreadsheet)""",
            expected_output="Syst√®me de suivi structur√© avec process et outils",
            agent=agents['marketing']
        ))

        # T√¢che 6: Planning relances
        tasks.append(Task(
            description="""Cr√©er une s√©quence de relances automatiques:
            - Timeline des relances (J+3, J+7, J+14, J+30)
            - Messages types pour chaque relance
            - Crit√®res d'arr√™t
            - Automatisation possible avec outils gratuits""",
            expected_output="S√©quence de relance compl√®te avec messages et timing",
            agent=agents['marketing']
        ))

        # T√¢che 7: M√©triques et ajustements
        tasks.append(Task(
            description="""D√©finir les KPIs √† suivre et le process d'optimisation:
            - 5 m√©triques cl√©s √† tracker
            - Fr√©quence d'analyse
            - Process d'A/B testing
            - Ajustements recommand√©s selon r√©sultats
            - Objectifs r√©alistes mois par mois""",
            expected_output="Dashboard de KPIs et process d'am√©lioration continue",
            agent=agents['marketing']
        ))

        return tasks

    def run(self, profile: Dict[str, Any], agent_type: str = 'all') -> str:
        """
        Ex√©cution du crew pour un ou plusieurs agents

        Args:
            profile: Donn√©es du profil freelance
            agent_type: Type d'agent √† ex√©cuter ('positioning', 'finance', 'marketing', 'all')

        Returns:
            R√©sultats format√©s en string
        """
        try:
            # Cr√©ation des agents
            agents = self.create_agents()

            # Pour simplifier et √©viter les timeouts, on limite √† 2 t√¢ches par agent
            tasks = []

            if agent_type == 'positioning':
                positioning_tasks = self.create_positioning_tasks(agents, profile)
                tasks.extend(positioning_tasks[:2])  # Seulement 2 premi√®res t√¢ches
            elif agent_type == 'finance':
                finance_tasks = self.create_finance_tasks(agents, profile)
                tasks.extend(finance_tasks[:2])  # Seulement 2 premi√®res t√¢ches
            elif agent_type == 'marketing':
                marketing_tasks = self.create_marketing_tasks(agents, profile)
                tasks.extend(marketing_tasks[:2])  # Seulement 2 premi√®res t√¢ches
            elif agent_type == 'all':
                # Pour 'all', on prend 1 t√¢che de chaque agent
                positioning_tasks = self.create_positioning_tasks(agents, profile)
                finance_tasks = self.create_finance_tasks(agents, profile)
                marketing_tasks = self.create_marketing_tasks(agents, profile)
                tasks.extend([positioning_tasks[0], finance_tasks[0], marketing_tasks[0]])

            # S√©lection des agents n√©cessaires
            selected_agents = []
            if agent_type == 'all':
                selected_agents = list(agents.values())
            elif agent_type in agents:
                selected_agents = [agents[agent_type]]

            # Cr√©ation et ex√©cution du crew
            crew = Crew(
                agents=selected_agents,
                tasks=tasks,
                verbose=True,  # Activer verbose pour voir les d√©tails
                process=Process.sequential
            )

            # Ex√©cution avec timeout implicite
            result = crew.kickoff()

            # Convertir le r√©sultat en string de mani√®re s√©curis√©e
            try:
                result_str = str(result)
                # Nettoyer les caract√®res Unicode probl√©matiques
                result_str = result_str.encode('utf-8', errors='ignore').decode('utf-8')
                return result_str
            except:
                # Fallback en cas de probl√®me d'encodage
                return str(result).encode('ascii', errors='ignore').decode('ascii')

        except Exception as e:
            # G√©rer l'erreur de mani√®re s√©curis√©e
            error_msg = str(e)
            try:
                error_msg = error_msg.encode('utf-8', errors='ignore').decode('utf-8')
            except:
                error_msg = error_msg.encode('ascii', errors='ignore').decode('ascii')
            return f"Erreur lors de l'ex√©cution: {error_msg}"


def execute_crew(profile_data: Dict[str, Any], agent_type: str = 'all') -> str:
    """
    Fonction principale pour ex√©cuter le crew depuis l'interface Streamlit

    Args:
        profile_data: Dictionnaire contenant les donn√©es du profil
        agent_type: Type d'agent √† ex√©cuter

    Returns:
        R√©sultats de l'ex√©cution en string
    """
    crew = FreelanceCrew()
    return crew.run(profile_data, agent_type)
